<template>
	<view>
		<view class="u-demo-block">
			<view>
				<swiper :indicator-dots="true" class="swiper">
					<swiper-item>
						<u-grid :border="true" @click="openPopup(popupData)">
							<u-grid-item v-for="(item, index) in swiperList" :index="index" :key="index">
								<u-icon :customStyle="{paddingTop:20+'rpx'}" :name="item" :size="30"></u-icon>
								<text class="grid-text" style="margin-top: 10px;">{{ '宫格' + (index + 1) }}</text>
							</u-grid-item>
							<u-grid-item>
								<u-icon :customStyle="{paddingTop:20+'rpx'}" name="plus-circle" :size="40"></u-icon>
								<text class="grid-text">添加</text>
							</u-grid-item>
						</u-grid>
					</swiper-item>
				</swiper>
			</view>
		</view>
		<u-toast ref="uToast" />
		<u-popup :safeAreaInsetBottom="true" :safeAreaInsetTop="true" :mode="popupData.mode" :show="show"
			:round="popupData.round" :overlay="popupData.overlay" :borderRadius="popupData.borderRadius"
			:closeable="popupData.closeable" :closeOnClickOverlay="popupData.closeOnClickOverlay" @close="close"
			@open="open">
			<view class="u-popup-slot" :style="{
					width: ['bottom', 'top'].includes(popupData.mode) ? '350px' : '350px',
					marginTop: ['left', 'right'].includes(popupData.mode) ? '500px' : '450px',
				}">
				<view class="u-demo-block__content">
					<!-- 注意，如果需要兼容微信小程序，最好通过setRules方法设置rules规则 -->
					<u--form labelPosition="left" :model="model1" ref="form1">
						<u-form-item label="名称" prop="goodsInfo.name" borderBottom ref="item1">
							<u--input v-model="model1.goodsInfo.name" border="none" placeholder="姓名,只能为中文">
							</u--input>
						</u-form-item>
						<u-form-item label="数量" prop="goodsInfo.sex" borderBottom ref="item1">
							<u-cell :border="false">
								<u-number-box slot="right-icon" v-model="value1" step="1" :min="0" @change="change">
								</u-number-box>
							</u-cell>
						</u-form-item>
						<u-form-item label="单价" prop="goodsInfo.name" borderBottom ref="item1">
							<u--input v-model="model1.goodsInfo.name" border="none">
							</u--input>
						</u-form-item>
						<u-form-item label="总价" prop="goodsInfo.name" borderBottom ref="item1">
							100
						</u-form-item>
						<u-form-item label="购买渠道" prop="radiovalue1" borderBottom labelWidth="80" ref="item2">
							<u-radio-group v-model="model1.radiovalue1">
								<u-radio :customStyle="{marginRight: '16px'}" v-for="(item, index) in radiolist1"
									:key="index" :label="item.name" :name="item.name">
								</u-radio>
							</u-radio-group>
						</u-form-item>

						<u-form-item label="信息" prop="intro" borderBottom ref="item3">
							<u--textarea placeholder="购买地址" v-model="model1.intro" count></u--textarea>
						</u-form-item>
						<u-form-item label="到货时间" prop="hotel" labelWidth="80" borderBottom
							@click="showCalendar = true; hideKeyboard()">
							<u--input v-model="model1.hotel" disabled disabledColor="#ffffff" placeholder="请选择住店和离店时间"
								border="none"></u--input>
							<u-icon slot="right" name="arrow-right"></u-icon>
						</u-form-item>

					</u--form>
					<u-button type="primary" text="提交" customStyle="margin-top: 50px" @click="submit">
					</u-button>
					<u-button type="error" text="删除" customStyle="margin-top: 10px" @click="reset"></u-button>
					
				</view>

			</view>
		</u-popup>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				swiperList: ['integral', 'kefu-ermai', 'coupon', 'gift', 'scan', 'pause-circle', 'wifi', 'email', 'list'],
				show: false,
				popupData: {
					overlay: true,
					mode: 'center',
					round: 10,
					closeable: true,
					closeOnClickOverlay: true
				},
				value1:0,
				fileList1: [],
				disabled1: false,
				tips: '',
				value: '',
				showCalendar: false,
				showBirthday: false,
				model1: {
					goodsInfo: {
						name: '楼兰',
						sex: '',
						birthday: ''
					},
					radiovalue1: '苹果',
					checkboxValue1: [],
					intro: '',
					code: ''
				},
				showSex: false,
				birthday: Number(new Date()),
				rules: {
					'goodsInfo.name': [{
						type: 'string',
						required: true,
						message: '请填写姓名',
						trigger: ['blur', 'change']
					}, {
						// 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明
						validator: (rule, value, callback) => {
							// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html
							return uni.$u.test.chinese(value);
						},
						message: "姓名必须为中文",
						// 触发器可以同时用blur和change，二者之间用英文逗号隔开
						trigger: ["change", "blur"],
					}],
					intro: {
						type: 'string',
						min: 3,
						required: true,
						message: '不低于3个字',
						trigger: ['change']
					},
					hotel: {
						type: 'string',
						min: 2,
						required: true,
						message: '请选择住店时间',
						trigger: ['change']
					},
					'goodsInfo.birthday': {
						type: 'string',
						required: true,
						message: '请选择生日',
						trigger: ['change']
					},
				},
				radiolist1: [
					{
						name: '淘宝',
						disabled: false
					},
					{
						name: '拼多多',
						disabled: false
					},
					{
						name: '线下',
						disabled: false
					}
				],
				checkboxList1: [{
						name: '羽毛球',
						disabled: false
					},
					{
						name: '跑步',
						disabled: false
					},
					{
						name: '爬山',
						disabled: false
					}
				]
			}
		},
		onReady() {
			// 如果需要兼容微信小程序，并且校验规则中含有方法等，只能通过setRules方法设置规则
			// this.$refs.form1.setRules(this.rules)
		},
		methods: {
			openPopup(popupData) {
				this.popupData = popupData
				uni.$u.sleep().then(() => {
					this.show = !this.show
				})
			},
			navigateBack() {
				uni.navigateBack()
			},
			open() {
				// console.log('open');
			},
			close() {
				this.show = false
				// console.log('close');
			},
			afterRead(event) {
				this.fileList1.push({
					url: event.file,
					status: 'uploading',
					message: '上传中'
				})
			},
			groupChange(n) {
				// console.log('groupChange', n);
			},
			radioChange(n) {
				// console.log('radioChange', n);
			},
			navigateBack() {
				uni.navigateBack()
			},
			sexSelect(e) {
				this.model1.goodsInfo.sex = e.name
				this.$refs.form1.validateField('goodsInfo.sex')
			},
			change(e) {
				// console.log(e);
			},
			formatter(day) {
				const d = new Date()
				let month = d.getMonth() + 1
				const date = d.getDate()
				if (day.month == month && day.day == date + 3) {
					day.bottomInfo = '有优惠'
					day.dot = true
				}
				return day
			},
			calendarConfirm(e) {
				this.showCalendar = false
				this.model1.hotel = `${e[0]} / ${e[e.length - 1]}`
				this.$refs.form1.validateField('hotel')
			},
			codeChange(text) {
				this.tips = text;
			},
			getCode() {
				if (this.$refs.uCode.canGetCode) {
					// 模拟向后端请求验证码
					uni.showLoading({
						title: '正在获取验证码'
					})
					setTimeout(() => {
						uni.hideLoading();
						// 这里此提示会被this.start()方法中的提示覆盖
						uni.$u.toast('验证码已发送');
						// 通知验证码组件内部开始倒计时
						this.$refs.uCode.start();
					}, 2000);
				} else {
					uni.$u.toast('倒计时结束后再发送');
				}
			},
			calendarClose() {
				this.showCalendar = false
				this.$refs.form1.validateField('hotel')
			},
			birthdayClose() {
				this.showBirthday = false
				this.$refs.form1.validateField('goodsInfo.birthday')
			},
			birthdayConfirm(e) {
				this.showBirthday = false
				this.model1.goodsInfo.birthday = uni.$u.timeFormat(e.value, 'yyyy-mm-dd')
				this.$refs.form1.validateField('goodsInfo.birthday')
			},
			submit() {
				// 如果有错误，会在catch中返回报错信息数组，校验通过则在then中返回true
				this.$refs.form1.validate().then(res => {
					uni.$u.toast('校验通过')
				}).catch(errors => {
					uni.$u.toast('校验失败')
				})
			},
			reset() {
				const validateList = ['goodsInfo.name', 'goodsInfo.sex', 'radiovalue1', 'checkboxValue1', 'intro',
					'hotel', 'code', 'goodsInfo.birthday'
				]
				this.$refs.form1.resetFields()
				this.$refs.form1.clearValidate()
				setTimeout(() => {
					this.$refs.form1.clearValidate(validateList)
					// 或者使用 this.$refs.form1.clearValidate()
				}, 10)
			},
			hideKeyboard() {
				uni.hideKeyboard()
			}
		},
		mounted() {
		}
	}
</script>

<style lang="scss">
	.swiper {
		height: 600px;
	}

	.u-popup-slot {
		width: 200px;
		height: 150px;
		@include flex;
		justify-content: center;
		align-items: center;
	}

	.grid-text {
		font-size: 15px;
		color: #909399;
		padding: 10rpx 0 50rpx 0rpx;
		/* #ifndef APP-PLUS */
		box-sizing: border-box;
		/* #endif */
	}

	.u-demo-block__content {
		margin-top: -450px;
	}
	
	
</style>
